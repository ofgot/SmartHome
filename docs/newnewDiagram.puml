@startuml

interface Device {
    UUID id
    String name
    double powerConsumption
    int usageDuration
    Date lastTurnOn

    void turnOn();
    void turnOff();
    getUsageConsumption()
}

class Computer implements Device {
    UUID id
    double powerConsumption
    int usageDuration
    Date lastTurnOn

    void turnOn();
    void turnOff();
    getUsageConsumption()
}

class TV implements Device {
    UUID id
    double powerConsumption
    int usageDuration
    Date lastTurnOn

    void turnOn();
    void turnOff();
    void changeChanel();
    void increaseVolume(int);
    void decreaseVolume(int);
    getUsageConsumption()

}

class Fridge implements Device {
    UUID id
    double powerConsumption
    int usageDuration
    Date lastTurnOn

    void turnOn();
    void turnOff();
    Product takeProduct(Product);
    Product loadProduct(Product);
    getUsageConsumption()

}

class TemperatureSensor implements Device {
    UUID id
    double powerConsumption
    int usageDuration
    Date lastTurnOn

    - int temperature;
    - List<Observer> observers
    addObserver(Observer)
    removeObserver(Observer)
    setTemperature(int temperature)
    notifyObservers()

    void turnOn();
    void turnOff();
    getUsageConsumption()

}

'Device Factory

abstract class DeviceFactory {
    Device createDevice();
}

class MultimediaFactory extends DeviceFactory {
    Device createDevice(): TV
    {static} MultimediaFactory getInstance()
}

class HouseholdAppliancesFactory extends DeviceFactory {
    Device createDevice(): Fridge, Computer
    {static} HouseholdAppliancesFactory getInstance()
}

class ComputerFactory extends HouseholdAppliancesFactory{
    Device createDevice(): Computer
    {static} ComputerFactory getInstance()
}

class FridgeFactory extends HouseholdAppliancesFactory{
    Device createDevice(): Fridge
    {static} FridgeFactory getInstance()
}

class HeatingFactory extends DeviceFactory {
    Device createDevice(): TemperatureSensor
    {static} HeatingFactory getInstance()
}

class HeatingSystemObserver implements Observer{
   -int temperature
    void update(int temperature)
    void turnOffHeatingSystem()
'    if temperature is over 20 turn off heating else turn on
}

'///////////////////////////////

interface Observer {
    void update(int temperature)
}


class Room implements HouseComponent {
    String name
    -List<Device> devices
    -List<Resident> residents

    void removeComponent(HouseComponent component)
    void addComponent(HouseComponent component)
    List<HouseComponent> getComponents()
    void addDevice(Device)
    void removeDevice(Device)
    void addResidence(Resident)
    void removeResident(Resident)

}

class Floor implements HouseComponent {
    -String name;
    -List<HouseComponent> rooms
    void addComponent(HouseComponent component)
    String getName()
    void addComponent(HouseComponent component)
    void removeComponent(HouseComponent component)
    List<HouseComponent> getComponents()
    String generateReport()
}

class Building implements HouseComponent {
    String name
    -List<HouseComponent> floors
    void addComponent(HouseComponent component)
    void removeComponent(HouseComponent component)
    List<HouseComponent> getComponents()
    String generateReport()
}

Building *-- Floor
Floor *-- Room
Room o-- Device
Resident --o Room

HouseConfigurationReport --> Building

'Command

interface Command {
    void execute();
    String toString()
}

class TurnOnDeviceAction implements Command {
    -Device device
    -Resident executor
    TurnOnDeviceAction(device)
    void execute()
    String toString()
}

class TurnOffDeviceAction implements Command {
    -Device device
    -Resident executor
    TurnOffDeviceAction(device)
    void execute()
    String toString()
}

class LoadProductAction implements Command {
    -Device device
    -Product product;
    -Resident executor
    loadProductAction(device, product);
    void execute();
    String toString()    HashMap<int personId, int amount> PersonIdGroup
}

class TakeProductAction implements Command {
    -Device device
    -Product product;
    -Resident executor
    takeProductAction(device, product);
    void execute();
    String toString()
}

class CheckTemperature implements Command {
    -Device device
    -Device executor
    takeProductAction(device);
    void execute();
    String toString()
}

class IncreaseVolumeAction implements Command {
    -Device device
    -int amount
    -Resident executor
    increaseVolumeAction(device, amount)
    void execute()
    String toString()
}

class DecreaseVolumeAction implements Command {
    -Device device
    -int amount
    -Resident executor
    decreaseVolumeAction(device, amount)
    void execute()
    String toString()
}

class DeviceApi {
    -Command action
    -List <device> devices
    -ReportGenerator report
    DeviceApi(ReportGenerator)
    void setAction(action)
    void executeAction()
}

Device --> DeviceApi
'////////////////////////////

abstract class Resident {
    UUID id;
    String name
    ResidentType type

    Resident(UUID id, String name)
}

enum ResidentType {
    Human, Cat
}

Resident --> ResidentType

class Human extends Resident{
    UUID id;
    String name
    public Human()
}

class Animal extends Resident {
    UUID id;
    String name
    public Animal()
}

class SmartHome{
    void executeCommand(Command command)
    String generateBuildingReport()
}

HouseConfigurationReport --o SmartHome

interface ReportStrategy {
    String generateReport()
}

class ConsumptionReportStrategy implements ReportStrategy{
    HashMap consumptionList<Device device, Double consumption>
    generateReport()
    collectData(List<device> devices)
    String generateReport()
}

class EventReportStrategy implements ReportStrategy{
    List<Event> events
    String generateReport()
}

ReportGenerator o-- ReportStrategy
SmartHome --> DeviceApi

class ActivityReportStrategy implements ReportStrategy{
    Map<Resident, Map<Device, Integer>> activityLog
    void logActivity(Resident resident, Device device)
    String generateReport()
}

class HouseConfigurationReport {
    -Building building;
    String generateReport()
}

class ReportGenerator {
    private ReportStrategy reportStrategy;

   void setReportStrategy(ReportStrategy reportStrategy)
    String generateReport()
}


DeviceApi o-- ReportGenerator
'SmartHome --> Building

class Event {
    String residentAndDevice
    Date date
    Command action
}

EventReportStrategy o-- Event

interface HouseComponent {
    String getName();
    void addComponent(HouseComponent component);
    void removeComponent(HouseComponent component);
    List<HouseComponent> getComponents();
    String generateReport();
}

Device <.. DeviceFactory
TemperatureSensor o-- Observer
DeviceApi --> Command

@enduml