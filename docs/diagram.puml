@startuml
class "Building" as bl {
    id: Long
    name: String
    yearBuilt: int
    floorsAmount: int
}

class Address {
    state : String
    city : String
    street : String
    numberOfBuilding : int
}

Address "1" --> "1" bl

class "Floor" as fl {
    floorNumber: int
    numRooms: int
}

class "Room" as ro {
    id: Long
    name: String
}

class "Documentation" {
    name: String
    contens: String
}

class "Device" as de {

    id: Long
    state: DeviceStatus
    brand: String
    model: String
    isActive: bool
    brokenStatus: int
    location: Room
    Documentation : String
    powerConsumptionActive: double
    powerConsumptionIdle: double
    powerConsumptionOff: double
    +turnOn()
    +turnOff()
    +notify(object message)
}

class deviceApi {

}

class interfaceState{

}

class Active{}
class Idle{}
class Off{}

Active --> interfaceState
Idle --> interfaceState
Off --> interfaceState

class "Sensor" as se {

}

class "FireSensor" as fise {
    sensitivity: double
}

class "MovingSensor" as mose {
    workOn: List<Creature>
}

class "MultimediaDevice" as md {
    +volume: int
    +play()
    +stop()
    +setVolume(decimal percentage)
}

class "Appliance" as ad {
    +maxCapacity: double liters
    +currentCapacity: double litres
    +maxTemperature: double
    +minTemperature: double
    +currentTemperature: double
    +updateCapacity(double capacity)
    +updateTemperature(double temperature)
    addContent(String, double)
}

class "TV" as tv {
}

class "Kettle" as ket {
}

class "Fridge" as frid {
    contents: HashMap<String, Double>
}

class "Creature" as cret {
    name: String
    age: int
    location: Room
}

class "Person" as pers {
    familyId: int
    status: Enum
    occupation: String
    location: String
    activities: List<String>
}

class Family {
    id: int
}
pers --> Family

Enum status {
    work
    home
}

class "Pet" as pet{
}

class "Cat" as cat {
}

class "Dog" as dog {
}

class "HouseConfigurationReport" {
    reportDate: Date
    details: String
}

class "EventReport" {
    eventDateStart: Date
    eventDateEnd: Date
    eventType: String
    eventDescription: String
    source: String
}


class "ActivityAndUsageReport" {
    reportDate: Date
    who: Person
    details: String
}

class "ConsumptionReport" {
    reportDate: Date
    totalEnergyConsumption: double
    totalWaterConsumption: double
    financialSummary: double
}

class EventDispatcher {}

HouseConfigurationReport "*" --> "1" bl : generates for >
EventReport "*" --> "1" EventDispatcher : generates from >
ActivityAndUsageReport "1" --> "*" cret : tracks >
ConsumptionReport "*" --> "1" EventDispatcher : analyzes >
deviceApi <--> EventDispatcher

cret "*" o-- "1" ro : contains <

pers "*" --|> "1" cret : is >
pers --> status
pet "*" --|> "1" cret : is >

cat  --|> pet : is >
dog --|> pet : is >

bl "1" --* "*" fl : part of <

fl "1" --* "*" ro : part of <

de --> deviceApi

ro "1" --o "*" deviceApi : contains >
Documentation "1" --> "*" de : have >

md "*" --|> "1" de : is >
ad "*" --|> "1" de : is >

interfaceState o-- de

tv "*" --|> "1" md : is >
ket "*" --|> "1" ad : is >
frid "*" --|> "1" ad : is >

se "*" --|> "1" de : is >
fise --|> se : is >
mose --|> se : is >
@enduml