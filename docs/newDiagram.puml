@startuml

interface Device {
    UUID id
    String name
    DeviceType type

    void turnOn();
    void turnOff();
}

enum DeviceType{
    TV, Computer, Fridge, LitterTray, TemperatureSensor
}

class Computer implements Device {
    UUID id

    void turnOn();
    void turnOff();

}

class Computer implements Device {

    void turnOn();
    void turnOff();

}

class TV implements Device {

    UUID id



    void turnOn();
    void turnOff();
    void changeChanel();
    void increaseVolume(int);
    void decreaseVolume(int);

}

class Fridge implements Device {

    UUID id


    void turnOn();
    void turnOff();
    Product takeProduct(Product);
    Product loadProduct(Product);

}

class LitterTray implements Device {

    UUID id

    void turnOn();
    void turnOff();
    void cleanPoop()

}

class TemperatureSensor implements Device {

    UUID id

    - int temperature;
    - List<Observer> observers
    addObserver(Observer)
    removeObserver(Observer)
    setTemperature(int temperature)
    notifyObservers()

    void turnOn();
    void turnOff();

}

abstract class DeviceFactory {
    Device createDevice();
}

class MultimediaFactory extends DeviceFactory {
    Device createDevice(): TV
    {static} MultimediaFactory getInstance()
}

class HouseholdAppliancesFactory extends DeviceFactory {
    Device createDevice(): Fridge, Computer
    {static} HouseholdAppliancesFactory getInstance()
}

class ComputerFactory extends HouseholdAppliancesFactory{
    Device createDevice(): Computer
    {static} ComputerFactory getInstance()
}

class FridgeFactory extends HouseholdAppliancesFactory{
    Device createDevice(): Fridge
    {static} FridgeFactory getInstance()
}

class HeatingFactory extends DeviceFactory {
    Device createDevice(): TemperatureSensor
    {static} HeatingFactory getInstance()
}


class HeatingSystemObserver implements Observer{
   -int temperature
    void update(int temperature)
    void turnOffHeatingSystem()

class HeatingSystem implements Observer{
   -int temperature
    update(int temperature)
'    if temperature is over 20 turn off heating else turn on
}

interface Observer {
    void update(int temperature)
}

class Room {
    -List<Device> devices
    -List<Resident> residents

interface HouseComponent {
    void displayInfo()

}

class Room implements HouseComponent {
    -List<Device> devices
    -List<Resident> residents

    void displayInfo()

    void addDevice(Device)
    void removeDevice(Device)
    void addResidence(Resident)
    void removeResident(Resident)

}

class Floor {
    void addComponent(HouseComponent component)
}

class Building {
    void addComponent(HouseComponent component)
}

Building --* Floor
Floor --* Room
'Device --> Room
Resident --> Room

interface Action {
    void execute();
}

class LeaveHome implements Action{
    -Resident actor
    LeaveHome(Resident)
    void execute
}

class TurnOnDeviceAction implements Action {
    -Resident actor
    -Device target

    List<Device> getDevices()
    List<Resident> getResidents()

}

class Floor implements HouseComponent {
    -List<Room> rooms
    void addComponent(HouseComponent component)
    void displayInfo()

}

class Building implements HouseComponent {
    -List<Floor> floors
    void addComponent(HouseComponent component)
    void displayInfo()

}

interface DeviceAction {
    void execute();
}

class TurnOnDeviceAction implements DeviceAction {
    -Device device

    TurnOnDeviceAction(device)
    void execute()
}



class TurnOffDeviceAction implements Action {
    -Resident actor
    -Device target

class TurnOffDeviceAction implements DeviceAction {
    -Device device

    TurnOffDeviceAction(device)
    void execute()
}


class LoadProductAction implements Action {
    -Resident actor
    -Device target

class LoadProductAction implements DeviceAction {
    -Device device

    -Product product;
    loadProductAction(device, product);
    void execute();
}


class TakeProductAction implements Action {
    -Resident actor
    -Device target
    -Product product;
    takeProductAction(device, product);
    void execute();
}

class CheckTemperature implements Action {
    -Device actor
    -Device target


class TakeProductAction implements DeviceAction {
    -Device device

    -Product product;
    takeProductAction(device, product);
    void execute();
}


class IncreaseVolumeAction implements Action {
    -Resident actor
    -Device target

class IncreaseVolumeAction implements DeviceAction {
    -Device device

    -int amount
    increaseVolumeAction(device, amount)
    void execute()
}


class DecreaseVolumeAction implements Action {
    -Resident actor
    -Device target

class DecreaseVolumeAction implements DeviceAction {
    -Device device

    -int amount
    decreaseVolumeAction(device, amount)
    void execute()
}


class CleanPoopAction implements Action {
    -Resident actor
    -Device target

class CleanPoopAction implements DeviceAction {
    -Device device

    CleanPoopAction(device)
    void execute()
}


class Controller implements IController{
    -Action action
    void setAction(ActionDTO)
    void executeAction()
}

abstract class Resident {
    UUID id;
    String name
    ResidentType type
}

enum ResidentType {
    Human, Cat
}

Resident --> ResidentType

class Human extends Resident{
    UUID id;
    String name
    public Human()
}

class Animal extends Resident {
    UUID id;
    String name
    public Animal()
}

class SmartHome{
    -ReportBuilder builder
    SmartHome()
    -void start(List<ActionDTO>)
    -List<ActionDTO> parseActionFile()
    void startSimulation()
    void initialize(InitializationDTO initDTO)
}

SmartHome --o ReportBuilder

class ActionDTO {
    List<ActionDTORecord> records
}

class ActionDTORecord {
    UUID actionId
    UUID targetId
    UUID actorId
    String payload
}

ActionDTO --* ActionDTORecord

class ReportBuilder {
    EventReport eventReport
    ActivityAndUsageReport activityAndUsageReport
    ConsumptionReport consumptionReport

    'generates classes inside yourself
    ReportBuilder()

    EventReport generateEventReport(Action action)
    ActivityAndUsageReport generateActivityAndUsageReport()
    HouseConfigurationReport generateHouseConfigurationReport(InitializationDTOBuilding)
    ConsumptionReport generateConsumptionReport()
}

ReportBuilder --o EventReport
ReportBuilder --o ActivityAndUsageReport
ReportBuilder --o HouseConfigurationReport
ReportBuilder --o ConsumptionReport

class InitializationDTO {
    List<InitializationDTOBuilding> buildings
}

class InitializationDTOBuilding {
    UUID id
    List<InitializationDTOFloor> floors
}

class InitializationDTOFloor {
    UUID id
    List<InitializationDTORoom> rooms
}

class InitializationDTORoom {
    UUID id
    List<Resident> residents
    List<Device> devices
}

SmartHome --> InitializationDTO
InitializationDTO --* InitializationDTOBuilding
InitializationDTOBuilding --* InitializationDTOFloor
InitializationDTOFloor --* InitializationDTORoom

class HouseConfigurationReport {
    List<HouseConfigurationReportBuilding> buildings
}

class HouseConfigurationReportBuilding {
    UUID id
    List<HouseConfigurationReportFloor> floors
    List<Resident> residents
}

class HouseConfigurationReportFloor {
    UUID id
    List<HouseConfigurationReportRoom> rooms
}

class HouseConfigurationReportRoom {
    UUID id
    List<Device> devices
    List<Resident> residents
}



class EventReport {
    HashMap<int actionId, int amount> actionTypeGroup
    HashMap<int deviceId, int amount> DeviceIdGroup
}

class ActivityAndUsageReport {
    HashMap<int personId, int amount> PersonIdGroup
}

class ConsumptionReport {
    HashMap<int deviceId, DeviceConsumption consumption> PersonIdGroup
}

class DeviceConsumption {
    int electricConsumption
}

interface IController {
    void setAction(ActionDTO)
}

SmartHome --> ReportActionProxy
ReportActionProxy --> Controller


class ReportActionProxy implements IController {
    void setAction(ActionDTO)
    -void send()
}



DeviceConsumption *-- ConsumptionReport

HouseConfigurationReportBuilding *-- HouseConfigurationReport
HouseConfigurationReportFloor *-- HouseConfigurationReportBuilding
HouseConfigurationReportRoom *-- HouseConfigurationReportFloor

Device <.. DeviceFactory
TemperatureSensor o-- Observer
Controller --> Action


ReportActionProxy --> ReportBuilder

SmartHome --> ActionDTO

Resident o-- Action
Device o-- Action


class DeviceController {
    -DeviceAction action
    void setAction(DeviceAction action)
    void executeAction()
}
'
'interface Mediator {
'    void interactWithDevice(Resident resident, Device device, DeviceAction action)
'}
'
'class SmartHomeMediator implements Mediator{
'    void interactWithDevice(Resident resident, Device device, DeviceAction action)
'}


abstract class Resident {
    void interactWithDevice(Device device, DeviceAction deviceAction)
}

class Human extends Resident{
    public Human()
    void interactWithDevice(Device device, DeviceAction deviceAction)
}

class Animal extends Resident {
    public Animal()
    void interactWithDevice(Device device, DeviceAction deviceAction)

}


interface ReportVisitor {
    void visit(Building)
    void visit(Floor)
    void visit(Room)
    void visit(Device)
    void visit(Resident)
}

class HouseConfigurationReport implements ReportVisitor {
    -StringBuilder reportStringBuilder report

    void visit(Building)
    void visit(Floor)
    void visit(Room)
    void visit(Device)
    void visit(Resident)
}

class EventReport implements ReportVisitor {
    void visit(Device)
    visit(Resident)
}

class ActivityAndUsageReport implements ReportVisitor {
    void visit(Device)
    void visit(Resident)
}

class ConsumptionReport implements ReportVisitor {
    void visit(Device)
}

interface Event {
    String getType();
    String getSource();
    String getTarget();
}



Device <.. DeviceFactory
TemperatureSensor o-- Observer
DeviceController --> DeviceAction

'HouseComponent --o SmartHomeMediator
'DeviceController --o SmartHomeMediator
'Resident --o SmartHomeMediator



@enduml